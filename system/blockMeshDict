/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

backgroundMesh
{
    xMin   205000; // L = 350
    xMax   209000;  //4
    yMin   736000; // L = 280
    yMax   740000; //7
    zMin   -5;
    zMax   650;
    xCells  50; //25
    yCells  50; //25
    zCells  30; //25
}

convertToMeters 1;

vertices
(
    ($:backgroundMesh.xMin $:backgroundMesh.yMin $:backgroundMesh.zMin)
    ($:backgroundMesh.xMax $:backgroundMesh.yMin $:backgroundMesh.zMin)
    ($:backgroundMesh.xMax $:backgroundMesh.yMax $:backgroundMesh.zMin)
    ($:backgroundMesh.xMin $:backgroundMesh.yMax $:backgroundMesh.zMin)

    ($:backgroundMesh.xMin $:backgroundMesh.yMin $:backgroundMesh.zMax)
    ($:backgroundMesh.xMax $:backgroundMesh.yMin $:backgroundMesh.zMax)
    ($:backgroundMesh.xMax $:backgroundMesh.yMax $:backgroundMesh.zMax)
    ($:backgroundMesh.xMin $:backgroundMesh.yMax $:backgroundMesh.zMax)
);

blocks
(
    hex (0 1 2 3 4 5 6 7)
    (
        $:backgroundMesh.xCells
        $:backgroundMesh.yCells
        $:backgroundMesh.zCells
    )
    simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
           (0 3 7 4)
           (3 2 6 7)
        );
    }

    outlet
    {
        type patch;
        faces
        (
           (1 5 6 2)
           (0 4 5 1)
        );
    }

    ground
    {
        type wall;
        faces
        (
            (0 1 2 3)
        );
    }

    top //Nir
    {
        type boundarylayer;
        faces
        (
            (4 7 6 5)
        );
    }



    frontAndBack
    {
        type symmetry;
        faces
        (
//            (0 4 5 1) //angle
//            (3 2 6 7)
//            (4 7 6 5)
        );
    }

);

mergePatchPairs
(
);

// ************************************************************************* //
